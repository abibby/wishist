/**
 * Wishist API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AuthApi", () => {
  let instance: api.AuthApi
  beforeEach(function() {
    instance = new api.AuthApi(config)
  });

  test("authEmailVerify", () => {
    const token: string = "token_example"
    return expect(instance.authEmailVerify(token, {})).resolves.toBe(null)
  })
  test("authLogin", () => {
    const body: api.LoginBody = undefined
    return expect(instance.authLogin(body, {})).resolves.toBe(null)
  })
  test("authPasswordChange", () => {
    const body: api.PasswordChangeBody = undefined
    return expect(instance.authPasswordChange(body, {})).resolves.toBe(null)
  })
  test("authPasswordForgot", () => {
    const body: api.PasswordForgotBody = undefined
    return expect(instance.authPasswordForgot(body, {})).resolves.toBe(null)
  })
  test("authPasswordReset", () => {
    const body: api.PasswordResetBody = undefined
    return expect(instance.authPasswordReset(body, {})).resolves.toBe(null)
  })
  test("authRefresh", () => {
    const body: api.LoginRefreshBody = undefined
    return expect(instance.authRefresh(body, {})).resolves.toBe(null)
  })
  test("authUserCreate", () => {
    const body: api.UserBody = undefined
    return expect(instance.authUserCreate(body, {})).resolves.toBe(null)
  })
})

describe("DefaultApi", () => {
  let instance: api.DefaultApi
  beforeEach(function() {
    instance = new api.DefaultApi(config)
  });

  test("friendCreate", () => {
    const body: api.FriendBody = undefined
    return expect(instance.friendCreate(body, {})).resolves.toBe(null)
  })
  test("friendDelete", () => {
    const body: api.FriendBody1 = undefined
    return expect(instance.friendDelete(body, {})).resolves.toBe(null)
  })
  test("friendList", () => {
    return expect(instance.friendList({})).resolves.toBe(null)
  })
  test("itemCreate", () => {
    const body: api.ItemBody1 = undefined
    return expect(instance.itemCreate(body, {})).resolves.toBe(null)
  })
  test("itemDelete", () => {
    const body: api.ItemBody2 = undefined
    return expect(instance.itemDelete(body, {})).resolves.toBe(null)
  })
  test("itemList", () => {
    const userId: number = 56
    const id: number = 56
    return expect(instance.itemList(userId, id, {})).resolves.toBe(null)
  })
  test("itemUpdate", () => {
    const body: api.ItemBody = undefined
    return expect(instance.itemUpdate(body, {})).resolves.toBe(null)
  })
  test("userCurrent", () => {
    return expect(instance.userCurrent({})).resolves.toBe(null)
  })
  test("userItemCreate", () => {
    const body: api.UseritemBody1 = undefined
    return expect(instance.userItemCreate(body, {})).resolves.toBe(null)
  })
  test("userItemDelete", () => {
    const body: api.UseritemBody2 = undefined
    return expect(instance.userItemDelete(body, {})).resolves.toBe(null)
  })
  test("userItemList", () => {
    const itemUserId: number = 56
    const itemId: number = 56
    return expect(instance.userItemList(itemUserId, itemId, {})).resolves.toBe(null)
  })
  test("userItemUpdate", () => {
    const body: api.UseritemBody = undefined
    return expect(instance.userItemUpdate(body, {})).resolves.toBe(null)
  })
  test("userList", () => {
    const username: string = "username_example"
    return expect(instance.userList(username, {})).resolves.toBe(null)
  })
})

